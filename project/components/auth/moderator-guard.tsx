'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/lib/supabase';
import { AlertTriangle, Shield, Lock, Edit } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';

interface ModeratorGuardProps {
  children: React.ReactNode;
}

export function ModeratorGuard({ children }: ModeratorGuardProps) {
  const { user, profile, isLoading } = useAuth();
  const router = useRouter();
  const [securityCheck, setSecurityCheck] = useState<'checking' | 'authorized' | 'denied'>('checking');
  const [securityReason, setSecurityReason] = useState<string>('');

  useEffect(() => {
    const performSecurityCheck = async () => {
      console.log('üîí D√âMARRAGE DU CONTR√îLE DE S√âCURIT√â MOD√âRATEUR');
      
      // √âtape 1: V√©rifier si l'utilisateur est connect√©
      if (!user) {
        console.log('‚ùå S√âCURIT√â: Aucun utilisateur connect√©');
        setSecurityReason('Aucune session utilisateur d√©tect√©e');
        setSecurityCheck('denied');
        router.push('/signin');
        return;
      }

      // √âtape 2: V√©rifier si on a un profil
      if (!profile) {
        console.log('‚ùå S√âCURIT√â: Aucun profil utilisateur');
        setSecurityReason('Profil utilisateur inaccessible');
        setSecurityCheck('denied');
        router.push('/unauthorized');
        return;
      }

      // √âtape 3: V√©rification C√îT√â SERVEUR du r√¥le (anti-manipulation)
      try {
        console.log('üîç S√âCURIT√â: V√©rification c√¥t√© serveur du r√¥le mod√©rateur...');
        const { data: serverProfile, error } = await supabase
          .from('profiles')
          .select('role, id, email')
          .eq('id', user.id)
          .single();

        if (error) {
          console.log('‚ùå S√âCURIT√â: Erreur lors de la v√©rification serveur:', error);
          setSecurityReason('Impossible de v√©rifier les permissions c√¥t√© serveur');
          setSecurityCheck('denied');
          router.push('/unauthorized');
          return;
        }

        // √âtape 4: V√©rifier que le r√¥le c√¥t√© serveur correspond au r√¥le local
        if (serverProfile.role !== profile.role) {
          console.log('üö® S√âCURIT√â: TENTATIVE DE MANIPULATION D√âTECT√âE!');
          console.log('R√¥le local:', profile.role, 'R√¥le serveur:', serverProfile.role);
          setSecurityReason('Incoh√©rence d√©tect√©e entre les permissions locales et serveur');
          setSecurityCheck('denied');
          router.push('/unauthorized');
          return;
        }

        // √âtape 5: V√©rifier que l'utilisateur est mod√©rateur OU admin
        if (serverProfile.role !== 'editor' && serverProfile.role !== 'admin') {
          console.log('‚ùå S√âCURIT√â: Utilisateur non-mod√©rateur tente d\'acc√©der √† la mod√©ration');
          console.log('R√¥le d√©tect√©:', serverProfile.role);
          setSecurityReason(`Acc√®s refus√©. R√¥le requis: mod√©rateur ou admin, r√¥le actuel: ${serverProfile.role}`);
          setSecurityCheck('denied');
          router.push('/unauthorized');
          return;
        }

        // ‚úÖ TOUTES LES V√âRIFICATIONS PASS√âES
        console.log('‚úÖ S√âCURIT√â: Acc√®s mod√©rateur autoris√© pour:', profile.email, 'avec r√¥le:', serverProfile.role);
        setSecurityCheck('authorized');

      } catch (error) {
        console.log('üö® S√âCURIT√â: Erreur critique lors du contr√¥le mod√©rateur:', error);
        setSecurityReason('Erreur de s√©curit√© critique');
        setSecurityCheck('denied');
        router.push('/unauthorized');
      }
    };

    if (!isLoading) {
      performSecurityCheck();
    }
  }, [user, profile, isLoading, router]);

  // Affichage pendant la v√©rification
  if (isLoading || securityCheck === 'checking') {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center">
            <Edit className="h-16 w-16 text-primary animate-pulse" />
          </div>
          <div className="space-y-2">
            <h2 className="text-xl font-semibold">Contr√¥le de s√©curit√©</h2>
            <p className="text-muted-foreground">V√©rification des permissions de mod√©ration...</p>
            <div className="flex items-center justify-center space-x-1">
              <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
              <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
              <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Affichage si acc√®s refus√©
  if (securityCheck === 'denied') {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="max-w-md mx-auto text-center space-y-6 p-6">
          <div className="flex items-center justify-center">
            <div className="flex items-center justify-center w-20 h-20 rounded-full bg-orange-100 dark:bg-orange-900">
              <Lock className="h-10 w-10 text-orange-600 dark:text-orange-300" />
            </div>
          </div>
          
          <div className="space-y-2">
            <h1 className="text-2xl font-bold text-orange-600">Acc√®s Refus√©</h1>
            <p className="text-muted-foreground">Permissions de mod√©ration requises</p>
          </div>

          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <strong>Raison:</strong> {securityReason}
            </AlertDescription>
          </Alert>
          
          <div className="space-y-2">
            <Button 
              onClick={() => router.push('/member')}
              className="w-full"
            >
              Retour √† mon espace
            </Button>
            <Button 
              variant="outline"
              onClick={() => router.push('/')}
              className="w-full"
            >
              Retour √† l'accueil
            </Button>
          </div>

          <p className="text-xs text-muted-foreground">
            Si vous pensez qu'il s'agit d'une erreur, contactez l'administrateur.
          </p>
        </div>
      </div>
    );
  }

  // ‚úÖ Acc√®s autoris√© - afficher le contenu mod√©rateur
  return <>{children}</>;
} 